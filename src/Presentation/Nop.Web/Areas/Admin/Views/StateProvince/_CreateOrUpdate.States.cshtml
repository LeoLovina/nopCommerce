@model StateProvinceModel

@if (Model.Id > 0)
{
    <div class="card-body">
        @await Html.PartialAsync("Table", new DataTablesModel
        {
            Name = "states-grid",
            UrlRead = new DataUrl("Cities", "StateProvince", new RouteValueDictionary { [nameof(CitySearchModel.StateProvinceId)] = Model.CitySearchModel.StateProvinceId}),
			UrlDelete = new DataUrl("CityDelete", "StateProvince", null),
            Length = Model.CitySearchModel.PageSize,
            LengthMenu = Model.CitySearchModel.AvailablePageSizes,
            ColumnCollection = new List<ColumnProperty>
            {
                new ColumnProperty(nameof(CityModel.Name))
                {
                    Title = T("Admin.Configuration.StateProvinces.Cities.Fields.Name").Text,
                    Width = "300"
                },
                new ColumnProperty(nameof(CityModel.Abbreviation))
                {
                    Title = T("Admin.Configuration.StateProvinces.Cities.Fields.Abbreviation").Text,
                    Width = "150"
                },
                new ColumnProperty(nameof(CityModel.Published))
                {
                    Title = T("Admin.Configuration.StateProvinces.Cities.Fields.Published").Text,
                    Width = "100",
                    ClassName = NopColumnClassDefaults.CenterAll,
                    Render = new RenderBoolean()
                },
                new ColumnProperty(nameof(CityModel.DisplayOrder))
                {
                    Title = T("Admin.Configuration.StateProvinces.Cities.Fields.DisplayOrder").Text,
                    Width = "100",
                    ClassName =  NopColumnClassDefaults.CenterAll
                },
                new ColumnProperty(nameof(CityModel.Id))
                {
                    Title = T("Admin.Common.Edit").Text,
                    Width = "100",
                    ClassName = NopColumnClassDefaults.Button,
                    Render = new RenderCustom("renderColumnEdit")
                },
                new ColumnProperty(nameof(CityModel.Id))
                {
                    Title = T("Admin.Common.Delete").Text,
                    Width = "100",
                    Render = new RenderButtonRemove(T("Admin.Common.Delete").Text),
                    ClassName = NopColumnClassDefaults.Button
                }
            }
        })
    </div>
    <div class="card-footer">
        <div width="100%">
            <button type="submit" id="btnAddNewState"
                    onclick="javascript:OpenWindow('@(Url.Action("CityCreatePopup", "StateProvince", new { stateProvinceId = Model.Id, btnId = "btnRefresh", formId = "country-form" }))', 800, 450, true); return false;"
                    class="btn btn-primary">
                @T("Admin.Configuration.StateProvinces.Cities.AddNew")
            </button>
            <button type="submit" id="btnRefresh" style="display: none"></button>
            <script>
                $(document).ready(function () {
                    $('#btnRefresh').click(function () {
                        //refresh grid
                        updateTable('#states-grid');

                        //return false to don't reload a page
                        return false;
                    });
                });
            </script>
        </div>
    </div>
}
else
{
    <div class="card-body">
        @T("Admin.Configuration.StateProvinces.Cities.SaveBeforeEdit")
    </div>
}

<script>
    function renderColumnEdit(data, type, row, meta) {
        return '<button onclick=\"javascript:OpenWindow(\'@Url.Content("~/Admin/Country/StateEditPopup/")' + data + '?btnId=btnRefresh&formId=country-form\', 800, 400, true); return false;\" class="btn btn-default"><i class="fas fa-pencil-alt"></i>@T("Admin.Common.Edit").Text</button>';
    }
</script>